{"version":3,"sources":["components/Perfil.js","components/Matchs.js","components/TelaInicial.js","App.js","serviceWorker.js","index.js"],"names":["CardStyled","styled","Card","ContainerButtons","div","CardMediaStyle","CardMedia","Perfil","useState","perfil","setPerfil","useEffect","chamarProximoCandidato","axios","get","then","response","data","profile","catch","error","console","log","image","photo","title","Typography","variant","name","bio","Fab","onClick","body","id","choice","post","headers","ButtonPerfil","Button","Matchs","matches","setMatches","map","curtidos","Avatar","alt","src","ContainerGeral","TelaInicialContainer","Header","resetar","put","TelaInicial","props","tela","setTela","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.645151cb.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react'\r\nimport styled from 'styled-components'\r\nimport Card from '@material-ui/core/Card';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport axios from 'axios'\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\n\r\nconst CardStyled = styled(Card)`\r\n    border: 1px solid black;\r\n    width: 380px;\r\n    height: 450px;\r\n    margin-top: 10px;\r\n`\r\n\r\nconst ContainerButtons = styled.div`\r\n    display: flex;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    height: 80px;\r\n`\r\nconst CardMediaStyle = styled(CardMedia)`\r\n    width: 100%;\r\n    height: 80%;\r\n`\r\nexport function Perfil(){\r\n    const [perfil, setPerfil] = useState({})\r\n    useEffect(()=>{\r\n        chamarProximoCandidato()\r\n    },[])\r\n\r\n    const chamarProximoCandidato = () =>{\r\n        axios.\r\n            get(`https://us-central1-missao-newton.cloudfunctions.net/astroMatch/nilson/person`)\r\n            .then((response)=>{\r\n                setPerfil(response.data.profile)\r\n            }).catch((error)=> {\r\n                console.log(error)\r\n            })\r\n\r\n    }\r\n    const curtir = () => {\r\n        console.log(perfil)\r\n        const body = {\r\n            id: perfil.id,\r\n            choice: true\r\n        }\r\n        axios.\r\n            post(`https://us-central1-missao-newton.cloudfunctions.net/astroMatch/nilson/choose-person`, body, {\r\n                headers: {'Content-Type': 'application/json'}\r\n            }).then((response)=> {\r\n                console.log(response)\r\n            }).catch((error)=> {\r\n                console.log(error)\r\n            })\r\n        chamarProximoCandidato()\r\n    }\r\n    \r\n    const negarChamego = () => {\r\n        const body = {\r\n            id: perfil.id,\r\n            choice: false\r\n        }\r\n        axios.\r\n            post(`https://us-central1-missao-newton.cloudfunctions.net/astroMatch/nilson/choose-person`, body, {\r\n                headers: {'Content-Type': 'application/json'}\r\n            }).then((response)=> {\r\n                console.log(response)\r\n            }).catch((error)=> {\r\n                console.log(error)\r\n            })\r\n        chamarProximoCandidato()\r\n    }\r\n    return(\r\n        <div>\r\n            <CardStyled>\r\n                <CardMediaStyle\r\n                    image={perfil.photo}\r\n                    title=\"foto perfil\"\r\n                />\r\n                <Typography variant=\"h4\">{perfil.name}</Typography>\r\n                <Typography variant=\"p\">{perfil.bio}</Typography>\r\n            </CardStyled>\r\n            <ContainerButtons>\r\n                <Fab onClick={negarChamego}>Feio</Fab>\r\n                <Fab onClick={curtir}>Cool</Fab>\r\n            </ContainerButtons>\r\n        </div>\r\n    )\r\n}","import React, {useState, useEffect} from 'react'\r\nimport axios from 'axios'\r\nimport styled from 'styled-components'\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\n\r\nconst ButtonPerfil = styled(Button)`\r\n    width: 95%;\r\n`\r\n\r\nexport function Matchs(){\r\n    const [matches, setMatches] = useState([])\r\n\r\n    useEffect(()=> {\r\n        axios.\r\n            get(`https://us-central1-missao-newton.cloudfunctions.net/astroMatch/nilson/matches`)\r\n            .then((response)=> {\r\n                setMatches(response.data.matches)\r\n            }).catch((error)=> {\r\n                console.log(error)\r\n            })\r\n    },[])\r\n    return(\r\n        <div>\r\n            {matches.map((curtidos)=>{\r\n                return (\r\n                    <ButtonPerfil>\r\n                        <Avatar alt=\"Foto perfil\" src={curtidos.photo}/>\r\n                        <Typography variant=\"p\">{curtidos.name}</Typography>\r\n                    </ButtonPerfil>\r\n                )\r\n\r\n            })}\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react'\r\nimport styled from 'styled-components'\r\nimport axios from 'axios'\r\nimport Button from '@material-ui/core/Button';\r\nimport Trocar from '@material-ui/icons/SyncAlt'\r\nimport {Perfil} from './Perfil'\r\nimport {Matchs} from './Matchs'\r\n\r\nconst ContainerGeral = styled.div`\r\n display: flex;\r\n justify-content: center;\r\n align-items: center;\r\n height: 100vh;\r\n background-color: gray;\r\n`\r\nconst TelaInicialContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    width: 400px;\r\n    height: 600px;\r\n    border: 1px solid black;\r\n    background-color: white;\r\n`\r\nconst Header = styled.div`\r\n    display: flex;\r\n    border-bottom: 1px solid black;\r\n    height: 10%;\r\n    width: 100%;\r\n    padding: 0;\r\n    margin: 0; \r\n`\r\nconst resetar = () => {\r\n    axios.\r\n        put(`https://us-central1-missao-newton.cloudfunctions.net/astroMatch/nilson/clear`,{\r\n            headers: {'Content-Type': 'application/json'}\r\n        })\r\n}\r\n\r\nexport function TelaInicial(props){\r\n    const [tela, setTela] = useState(\"TelaInicial\")\r\n    const mudarPagina = () =>{\r\n        if(tela === \"TelaInicial\"){\r\n            setTela(\"Matchs\")\r\n        }else{\r\n            setTela(\"TelaInicial\")\r\n        }\r\n    }\r\n    return(\r\n        <ContainerGeral>\r\n            <TelaInicialContainer>\r\n                <Header>\r\n                    <p>astroMatch</p>\r\n                    <Button onClick= {mudarPagina}>\r\n                        <Trocar/>\r\n                    </Button>\r\n                </Header>\r\n                {tela === \"TelaInicial\"? (<Perfil/>): (<Matchs/>)}\r\n\r\n            </TelaInicialContainer>\r\n            <Button onClick= {resetar}>resetar sistema</Button>\r\n        </ContainerGeral>\r\n    )\r\n}","import React, {useState} from 'react';\nimport {TelaInicial} from './components/TelaInicial'\nimport {Matchs} from './components/Matchs'\n\nexport default function App() {\n  return (\n    <div>\n      <TelaInicial />\n    </div>\n  );\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}