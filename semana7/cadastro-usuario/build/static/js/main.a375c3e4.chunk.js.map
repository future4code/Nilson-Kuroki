{"version":3,"sources":["components/CadasterUsers.js","components/ListUsers.js","App.js","serviceWorker.js","index.js"],"names":["ContainerCadastro","styled","div","CadasterUsers","state","nameValue","emailValue","onChangeNome","event","setState","target","value","onChangeEmail","pegaUsuario","axios","get","headers","authorization","then","resposta","usuarios","data","catch","console","log","criarUsuario","body","name","email","post","this","onChange","onClick","React","Component","ContainerNames","ContainerListNames","ListUsers","apagarUser","userId","window","confirm","delete","error","alert","map","user","id","ContainerPages","App","pageAtual","onClickPage","nextPage","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.a375c3e4.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport axios from 'axios'\r\n\r\nconst ContainerCadastro = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  width: 20vw;\r\n  height: 25vh;\r\n  padding: 10px;\r\n  border: 1px solid black;\r\n`\r\nexport class CadasterUsers extends React.Component{\r\n    state = {\r\n        nameValue: \"\",\r\n        emailValue: \"\",\r\n    }\r\n\r\n    onChangeNome = (event) => {\r\n        this.setState({nameValue: event.target.value})\r\n      }\r\n      onChangeEmail = (event) => {\r\n        this.setState({emailValue: event.target.value})\r\n      }\r\n      pegaUsuario = () =>{\r\n        axios.get('https://us-central1-labenu-apis.cloudfunctions.net/labenusers/users',{\r\n          headers:{\r\n            authorization: 'Nilson-Kuroki-Julian'\r\n          }\r\n        }).then((resposta) => {\r\n          this.setState({usuarios: resposta.data})\r\n        }).catch((resposta)=>{\r\n          console.log(\"deu erro\")\r\n        })\r\n      }\r\n      criarUsuario = () => {\r\n        const body = {\r\n          name: this.state.nameValue,\r\n          email: this.state.emailValue\r\n        }\r\n    \r\n        axios.post('https://us-central1-labenu-apis.cloudfunctions.net/labenusers/users', body,{\r\n          headers:{\r\n            authorization: 'Nilson-Kuroki-Julian'\r\n          }\r\n        }).then((resposta)=> {\r\n          console.log(\"uhu deu certo!\", resposta.data)\r\n          this.pegaUsuario()\r\n        }).catch((resposta)=>{\r\n          console.log(\"Algo deu errado\", resposta)\r\n        })\r\n        this.setState({nameValue: '', emailValue: ''})\r\n      }\r\n    render(){\r\n        return(\r\n            <ContainerCadastro>\r\n                <label>Nome:</label>\r\n                <input value = {this.state.nameValue} onChange={this.onChangeNome}/>\r\n                <label>E-mail:</label>\r\n                <input value = {this.state.emailValue} onChange = {this.onChangeEmail}/>\r\n                <button onClick={this.criarUsuario}>Enviar</button>\r\n            </ContainerCadastro>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport axios from 'axios'\r\n\r\nconst ContainerNames = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\nconst ContainerListNames = styled.div`\r\n\r\n`\r\nexport class ListUsers extends React.Component{\r\n  state={\r\n    usuarios:[]\r\n  }\r\n  apagarUser = (userId)=>{\r\n\r\n    if(window.confirm(\"Tem certeza que deseja apagar?\")){\r\n      axios.delete(`https://us-central1-labenu-apis.cloudfunctions.net/labenusers/users/${userId}`,{\r\n      headers:{\r\n        authorization: 'Nilson-Kuroki-Julian'\r\n      }\r\n    }).then((resposta)=> {\r\n      console.log(resposta)\r\n      this.pegaUsuario()\r\n    }).catch((error)=> {\r\n      console.log(error)\r\n    })\r\n    }else{\r\n      window.alert(\"Voce nao excluiu!\")\r\n    }\r\n  }\r\n  componentDidMount(){\r\n    this.pegaUsuario()\r\n  }\r\n  \r\n  pegaUsuario = () =>{\r\n    axios.get('https://us-central1-labenu-apis.cloudfunctions.net/labenusers/users',{\r\n      headers:{\r\n        authorization: 'Nilson-Kuroki-Julian'\r\n      }\r\n    }).then((resposta) => {\r\n      this.setState({usuarios: resposta.data})\r\n    }).catch((resposta)=>{\r\n      console.log(\"deu erro\")\r\n    })\r\n  }\r\n    render(){\r\n        return(\r\n            <ContainerListNames>\r\n          {this.state.usuarios.map((user)=>{\r\n              return(\r\n                <ContainerNames>\r\n                  <p>{user.name}</p>\r\n                  <button onClick={()=>{this.apagarUser(user.id)}}>apagar</button>\r\n                </ContainerNames>\r\n                \r\n              ) \r\n            })\r\n          }\r\n        </ContainerListNames>)}\r\n        \r\n    }","import React from 'react';\nimport styled from 'styled-components'\nimport './App.css';\nimport {CadasterUsers} from './components/CadasterUsers'\nimport {ListUsers} from './components/ListUsers'\n\nconst ContainerPages = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\nclass App extends React.Component {\n  state= {   \n    pageAtual: \"CadasterUsers\"\n  } \n  onClickPage = () => {\n    const nextPage = this.state.pageAtual === \"CadasterUsers\"? \"ListUsers\": \"CadasterUsers\"\n    this.setState({pageAtual: nextPage})\n  }\n  render(){\n    return (\n      <ContainerPages>\n        <button onClick={this.onClickPage}>\n          {this.state.pageAtual === \"CadasterUsers\"? \"Ir para Lista de usuarios\": \"Cadastrar usuario\"}\n        </button>\n        {this.state.pageAtual === \"CadasterUsers\"? (\n          <CadasterUsers/>):(<ListUsers/>)}\n      </ContainerPages>\n      \n    );\n  }\n}\n  \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}