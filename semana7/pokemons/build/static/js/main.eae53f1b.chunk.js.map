{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ContainerPage","styled","div","ContainerPokemon","App","state","pokemons","pokeImageFront","pokeImageBack","pokeType","pokeName","pegaPokemon","event","target","value","axios","get","then","response","console","log","data","sprites","back_default","setState","front_default","types","catch","err","results","onChange","this","map","pokemon","key","name","src","tipo","type","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"uiBAKA,IAAMA,EAAgBC,IAAOC,IAAV,KAObC,EAAmBF,IAAOC,IAAV,KA2DPE,E,4MAvDbC,MAAM,CACJC,SAAU,GACVC,eAAgB,GAChBC,cAAe,GACfC,SAAU,GACVC,SAAS,I,EAQXC,YAAc,SAACC,GAEb,IAAMF,EAAWE,EAAMC,OAAOC,MAC9BC,IAAMC,IAAN,4CAA+CN,IAAYO,MAAK,SAACC,GAC/DC,QAAQC,IAAIF,EAASG,KAAKC,QAAQC,cAClC,EAAKC,SAAS,CACZd,SAAUA,EACVH,eAAgBW,EAASG,KAAKC,QAAQG,cACtChB,SAAUS,EAASG,KAAKK,MACxBlB,cAAeU,EAASG,KAAKC,QAAQC,kBAEtCI,OAAM,SAACC,GACRT,QAAQC,IAAIQ,O,kEAlBI,IAAD,OACjBb,IAAMC,IAAI,gDACRC,MAAK,SAACC,GACN,EAAKM,SAAS,CAAClB,SAAUY,EAASG,KAAKQ,e,+BAmBzC,OACE,kBAAC7B,EAAD,KACE,4BAAQ8B,SAAUC,KAAKpB,aACrB,4BAAQG,MAAM,IAAd,UACCiB,KAAK1B,MAAMC,SAAS0B,KAAI,SAACC,GACxB,OACE,4BAAQC,IAAKD,EAAQE,KAAMrB,MAAOmB,EAAQE,MAAOF,EAAQE,UAI9DJ,KAAK1B,MAAMK,UAAa,kBAACP,EAAD,KACvB,yBAAKiC,IAAKL,KAAK1B,MAAMG,gBACrB,6BACE,4BAAKuB,KAAK1B,MAAMK,UACd,0CAAwBqB,KAAK1B,MAAMI,SAASuB,KAAI,SAAAK,GAC9C,OAAO,8BAAOA,EAAKC,KAAKH,KAAO,SAIrC,yBAAKC,IAAKL,KAAK1B,MAAME,uB,GAjDbgC,IAAMC,WCHJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEd5B,OAAM,SAAA6B,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.eae53f1b.chunk.js","sourcesContent":["import React from 'react';\nimport styled from \"styled-components\"\nimport './App.css';\nimport axios from 'axios';\n\nconst ContainerPage = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-top: 20px;\n`\n\nconst ContainerPokemon = styled.div`\n  display: flex;\n`\nclass App extends React.Component{\n  state={\n    pokemons: [],\n    pokeImageFront: \"\",\n    pokeImageBack: \"\",\n    pokeType: [],\n    pokeName:\"\"\n  }\n  componentDidMount(){\n    axios.get('https://pokeapi.co/api/v2/pokemon/?limit=151'\n    ).then((response) => {\n      this.setState({pokemons: response.data.results})\n    })\n  }\n  pegaPokemon = (event) =>{\n    \n    const pokeName = event.target.value\n    axios.get(`https://pokeapi.co/api/v2/pokemon/${pokeName}`).then((response)=>{\n      console.log(response.data.sprites.back_default)\n      this.setState({\n        pokeName: pokeName,\n        pokeImageFront: response.data.sprites.front_default, \n        pokeType: response.data.types,\n        pokeImageBack: response.data.sprites.back_default\n      })\n    }).catch((err)=>{\n      console.log(err)\n    })\n  }\n  render(){\n    return(\n      <ContainerPage>\n        <select onChange={this.pegaPokemon}>\n          <option value=\"\">nenhum</option>\n          {this.state.pokemons.map((pokemon)=>{\n            return (\n              <option key={pokemon.name} value={pokemon.name}>{pokemon.name}</option>\n            )\n          })}\n        </select>\n        {this.state.pokeName && (<ContainerPokemon>\n          <img src={this.state.pokeImageBack} />\n          <div>\n            <h2>{this.state.pokeName}</h2>\n              <strong>Tipo: </strong>{this.state.pokeType.map(tipo =>{\n                return <span>{tipo.type.name + \" \"}</span>\n                })\n              }\n          </div>\n          <img src={this.state.pokeImageFront} />\n        </ContainerPokemon>)}\n        \n      </ContainerPage>\n    )\n  }\n}\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}